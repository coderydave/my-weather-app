{"version":3,"sources":["components/weathercard/WeatherCard.jsx","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","weatherData","className","name","class","src","weather","icon","alt","id","main","temp","description","API_KEY","App","useState","setWeatherData","cityName","setCityName","cityRef","useRef","getWeatherByCityName","useCallback","a","url","axios","get","data","current","alert","getWeatherByCoords","position","latitude","coords","longitude","console","log","useEffect","navigator","geolocation","getCurrentPosition","error","placeholder","value","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8QA6BeA,EAxBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OAClB,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,SAAf,UACGD,EAAYE,KACb,sBAAMC,MAAM,eAAZ,SACE,qBACEC,IAAG,UARI,mCAQJ,YAAiBJ,EAAYK,QAAQ,GAAGC,KAAxC,QACHC,IAAI,cAKV,sBAAKN,UAAU,OAAf,UACE,oBAAGA,UAAU,OAAb,yBACc,uBAAMO,GAAG,OAAT,wBAAqBR,EAAYS,KAAKC,KAAtC,mBAEd,oBAAGT,UAAU,OAAb,yBAEE,uBAAMO,GAAG,OAAT,cAAkBR,EAAYK,QAAQ,GAAGM,yB,gBClB3CC,G,MAAU,oCAsEDC,MAnEf,WACE,MAAsCC,mBAAS,MAA/C,mBAAOd,EAAP,KAAoBe,EAApB,KACA,EAAgCD,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,iBAAO,IAMjBC,EAAuBC,sBAAW,sBAAC,gCAAAC,EAAA,6DACjCC,EADiC,yEACuCP,EADvC,kBACyDJ,GADzD,kBAIdY,IAAMC,IAAIF,GAJI,gBAI7BG,EAJ6B,EAI7BA,KACRX,EAAeW,GACfR,EAAQS,QAAUD,EAAKxB,KANc,kDAQrC0B,MAAM,oCACNX,EAAYC,EAAQS,SATiB,0DAWtC,CAACZ,EAAgBC,IAEda,EAAqBR,sBAAW,uCACpC,WAAMS,GAAN,uBAAAR,EAAA,6DACQS,EAAWD,EAASE,OAAOD,SAC3BE,EAAYH,EAASE,OAAOC,UAC5BV,EAHR,2EAGkFQ,EAHlF,gBAGkGE,EAHlG,kBAGqHrB,GAHrH,kBAM2BY,IAAMC,IAAIF,GANrC,gBAMYG,EANZ,EAMYA,KACRQ,QAAQC,IAAIT,GACZR,EAAQS,QAAUD,EAAKxB,KACvBe,EAAYS,EAAKxB,MACjBa,EAAeW,GAVnB,kDAYIE,MAAM,oCAZV,0DADoC,sDAgBpC,CAACb,EAAgBE,IAOnB,OAJAmB,qBAAU,WACRC,UAAUC,YAAYC,mBAAmBV,EAAoBK,QAAQM,SACpE,CAACX,IAGF,sBAAK5B,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,6CACA,sBAAKA,UAAU,QAAf,UACE,uBAAOA,UAAU,eACfwC,YAAY,WACZC,MAAO1B,EACP2B,SAAU,SAAAC,GAAC,OAAI3B,EAAY2B,EAAEC,OAAOH,UAEtC,wBAAQzC,UAAU,aAAa6C,QAAS1B,EAAxC,0BAGHpB,EACC,cAAC,EAAD,CAAaA,YAAaA,IAE1B,qBAAKG,MAAM,sBCzDJ4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAGjDZ,M","file":"static/js/main.47e84c50.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./WeatherCard.scss\";\r\n\r\nconst ICON_URL = \"https://openweathermap.org/img/w\";\r\n\r\nconst WeatherCard = ({ weatherData }) => (\r\n  <div className=\"main\">\r\n    <div className=\"header\">\r\n      {weatherData.name}\r\n      <span class=\"weather-icon\">\r\n        <img\r\n          src={`${ICON_URL}/${weatherData.weather[0].icon}.png`}\r\n          alt=\"icon\"\r\n        />\r\n      </span>\r\n    </div>\r\n\r\n    <div className=\"body\">\r\n      <p className=\"temp\">\r\n        Temprature: <span id=\"span\"> {`${weatherData.main.temp}CÂ°`} </span>\r\n      </p>\r\n      <p className=\"temp\">\r\n        Description:\r\n        <span id=\"span\"> {weatherData.weather[0].description}</span>\r\n      </p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default WeatherCard;\r\n","import React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport WeatherCard from './components/weathercard/WeatherCard.jsx';\nimport axios from 'axios';\nimport './App.scss';\n\nconst API_KEY = '27f0db16932c5a503fedac29d69506f2'\n\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState(null);\n  const [cityName, setCityName] = useState('');\n  const cityRef = useRef('');\n\n  const refresh = () => {\n    window.location.reload();\n  }\n\n  const getWeatherByCityName = useCallback(async () => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?units=metric&q=${cityName}&appid=${API_KEY}`;\n\n    try {\n      const { data } = await axios.get(url);\n      setWeatherData(data);\n      cityRef.current = data.name;\n    } catch (err) {\n      alert('No such settlement can be found!');\n      setCityName(cityRef.current);\n    }\n  }, [setWeatherData, cityName]);\n\n  const getWeatherByCoords = useCallback(\n    async position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const url = `https://api.openweathermap.org/data/2.5/weather?units=metric&lat=${latitude}&lon=${longitude}&appid=${API_KEY}`;\n\n      try {\n        const { data } = await axios.get(url);\n        console.log(data);\n        cityRef.current = data.name;\n        setCityName(data.name);\n        setWeatherData(data);\n      } catch (err) {\n        alert('No such settlement can be found!');\n      }\n    },\n    [setWeatherData, setCityName]\n  );\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(getWeatherByCoords, console.error);\n  }, [getWeatherByCoords]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"head\">\n        <h2>Weather APP</h2>\n        <div className=\"title\">\n          <input className=\"search-field\"\n            placeholder=\"Budapest\"\n            value={cityName}\n            onChange={e => setCityName(e.target.value)}\n          />\n          <button className=\"search-btn\" onClick={getWeatherByCityName}>Search</button>\n        </div>\n      </div>\n      {weatherData ? (\n        <WeatherCard weatherData={weatherData} />\n      ) : (\n        <div class=\"lds-dual-ring\"></div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}